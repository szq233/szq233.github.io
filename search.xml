<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/27/hello-world/</url>
    <content><![CDATA[<p>Hello World</p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript中__proto__与prototype</title>
    <url>/2021/05/03/js%E4%B8%AD-proto-%E4%B8%8Eprototype/</url>
    <content><![CDATA[<p><em>概要：js中__proto__和prototype的区别与个人解读</em></p>
<span id="more"></span>

<h4 id="关于js中-proto-和prototype的说明"><a href="#关于js中-proto-和prototype的说明" class="headerlink" title="关于js中__proto__和prototype的说明"></a>关于js中__proto__和prototype的说明</h4><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><p> __proto__是浏览器对实例化对象中[[prototype]]属性的命名，__proto__是属于对象的属性，prototype是属于函数对象的属性。</p>
<h5 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h5><p>__proto__是访问prototype的入口。</p>
<h4 id="个人解读："><a href="#个人解读：" class="headerlink" title="个人解读："></a>个人解读：</h4><h5 id="区别：-1"><a href="#区别：-1" class="headerlink" title="区别："></a>区别：</h5><p>prototype可以理解为在函数（函数对象）上的一个名为叫原型对象的属性，这里的原型对象是命名和功能意义双重含义的，所以prototype是函数（函数对象）上的一个属性，保存原型对象，意义上也可以叫做原型对象。那么这个原型对象的内容是一些可以继承的属性和方法。而__proto__是对象上的一个属性，通过这个属性可以访问prototype这个函数对象上的属性里的内容，也就是说<code>对象.__proto__</code>指向构造该对象的<code>函数.prototype</code>。</p>
<p>比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn1</span>(<span class="params">...</span>)</span>&#123;...&#125;; <span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> Fn1(...); <span class="comment">//new一个对象</span></span><br><span class="line">obj1.__proto__ === Fn1.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>当然，由于函数在js语言中也是对象，所以也有__proto__属性，指向构造该函数的函数的prototype，一次类推，这就形成了一条原型链，链子的尽头是Object.prototype为null，这个Object非泛指某一个对象，而是实际的构造所有对象的函数。</p>
<h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>这里还要提一下construct这个属性，理解为构造器，该属性是函数，并挂载在函数的prototype属性上。每一个由函数构造而来的对象都有一个construct属性（继承于构造该对象的函数），该属性功能为访问（获取）构造该对象的构造函数，可以理解为<code>该构造函数.prototype.construct == 该构造函数</code>。<span style="color:red">该构造函数构造的对象.construct</span>继承自<span style="color:red">该构造函数.prototype.construct</span> == <span style="color:red">该构造函数</span></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript不同数据在内存中存储方式</title>
    <url>/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><em>概要：Js数据类型在内存中的存储形式……</em></p>
<span id="more"></span>

<h2 id="Js数据类型："><a href="#Js数据类型：" class="headerlink" title="Js数据类型："></a>Js数据类型：</h2><ul>
<li>简单数据类型（基本数据类型）:Number、String、Boolean、Undefined、Null</li>
<li>复杂数据类型（引用数据类型）:Object、Array、Function</li>
</ul>
<h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><ul>
<li>常用的数据结构：数组、栈、堆、列表、链表、图、树</li>
<li>Js上述两种数据类型使用两种数据结构：栈（先进后出）、堆（特殊的树形结构）</li>
</ul>
<h2 id="数据存储方式："><a href="#数据存储方式：" class="headerlink" title="数据存储方式："></a>数据存储方式：</h2><h3 id="1、简单数据类型："><a href="#1、简单数据类型：" class="headerlink" title="1、简单数据类型："></a>1、简单数据类型：</h3><p>​    简单数据类型保存在栈中，这些类型在内存中别占有固定大小，他们的值保存在栈空间，按值访问。变量在声明过程中，会在栈中开辟一段内存空间，变量值直接存在该内存中，变量读写的是它们实际保存的值。</p>
<img src="/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/01.png" class>

<p>​    简单数据数据复制时，会为新声明的变量直接开辟一段新空间， 然后把值复制到为新变量分配的空间中</p>
<p>​    简单数据类在当前执行环境结束时销毁。</p>
<h3 id="2、复杂数据类型："><a href="#2、复杂数据类型：" class="headerlink" title="2、复杂数据类型："></a>2、复杂数据类型：</h3><p>​    复杂数据类型是不固定大小的数据，但是存放他们的地址大小是固定的，所以把地址保存在栈中，值保存在堆中。复杂数据类型是一个指针，指针保存在栈中，但是指针指向的是堆。即存储复杂数据类型的变量保存在栈中，数据本身保存在堆中。读取其数据时，先访问栈中的地址，通过地址找到存在堆中的数据。</p>
<p><img src="/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/02.png"></p>
<p>​    复杂数据类型在进行拷贝的时候，分为深拷贝和浅拷贝：<br>​            浅拷贝：复制的是引用地址，所以拷贝的变量存储的引用地址和原来的指向堆中同一个地址。</p>
<p>​    深拷贝：栈中开辟一段新的空间存储复制的变量，堆中开辟一个新的空间存储复制的内容，栈中变量存储的引用地址指向堆中复制的一个新的地址。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>newpagename</title>
    <url>/2021/04/27/newpagename/</url>
    <content><![CDATA[<p>测试测试测试测试</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>newpagename2</title>
    <url>/2021/04/28/newpagename2/</url>
    <content><![CDATA[<p>测试2测试2测试2</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭NexT主题动画导致侧边栏消失</title>
    <url>/2021/04/30/%E5%85%B3%E9%97%ADNexT%E4%B8%BB%E9%A2%98motion%E5%AF%BC%E8%87%B4%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B6%88%E5%A4%B1/</url>
    <content><![CDATA[<p><em>概要：关于Hexo的NexT主题关闭motion动画导致侧边栏消失的解决方法……</em></p>
<h6 id><a href="#" class="headerlink" title></a><span id="more"></span></h6><h5 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h5><p>最近上手Hexo搭建博客，顺利搭建博客并一眼相中NexT这类简约风格的主题样式。</p>
<p>最初，NexT主题因为搭载的 <a href="https://theme-next.js.org/animate">https://theme-next.js.org/animate</a>的CSS动画引擎，第一眼那丝滑的动画确实特别惹眼，但由于个人喜好极速简约，便在网络上搜索关闭NexT主题过渡动画的方法，按网络上说法将主题根目录下_config.yml文件的<code>motion： enable：true</code>修改为<code>enable：false</code>，确实完成了动画的关闭，但拥有小部件和头像功能的侧边栏消失。</p>
<p>花了段时间找问题，在打开浏览器调试功能时，发现.sidebar元素被赋予了<code>visiblity：hidden</code>属性，在修改为<code>visiblity：visible</code>后，侧边栏再次可见。于是尝试找样式源文件，最终解决问题。</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>因为我用的NexT主题的Pisces的scheme，其他类型的可以参照尝试解决，找到主题文件夹如下图路径中的_sidebar.styl文件，打开该文件。</p>
<p><img src="/2021/04/30/%E5%85%B3%E9%97%ADNexT%E4%B8%BB%E9%A2%98motion%E5%AF%BC%E8%87%B4%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B6%88%E5%A4%B1/03.png"></p>
<p>搜索visibility，将visibility: hidden;修改为visibility: visible;</p>
<p><img src="/2021/04/30/%E5%85%B3%E9%97%ADNexT%E4%B8%BB%E9%A2%98motion%E5%AF%BC%E8%87%B4%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B6%88%E5%A4%B1/04.png"></p>
<p>保存，执行hexo cl、hexo g、hexo d稍微等待一会，刷新博客，发现侧边栏可以正常显示</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
