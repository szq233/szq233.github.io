<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Szq233的博客站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-29T17:00:42.537Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Szq233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript不同数据在内存中存储方式</title>
    <link href="http://example.com/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2021-04-29T14:44:01.000Z</published>
    <updated>2021-04-29T17:00:42.537Z</updated>
    
    <content type="html"><![CDATA[<h6 id="概要：Js数据类型在内存中的存储形式……"><a href="#概要：Js数据类型在内存中的存储形式……" class="headerlink" title="概要：Js数据类型在内存中的存储形式……"></a><em>概要：Js数据类型在内存中的存储形式……</em></h6><span id="more"></span><h2 id="Js数据类型："><a href="#Js数据类型：" class="headerlink" title="Js数据类型："></a>Js数据类型：</h2><ul><li>简单数据类型（基本数据类型）:Number、String、Boolean、Undefined、Null</li><li>复杂数据类型（引用数据类型）:Object、Array、Function</li></ul><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><ul><li>常用的数据结构：数组、栈、堆、列表、链表、图、树</li><li>Js上述两种数据类型使用两种数据结构：栈（先进后出）、堆（特殊的树形结构）</li></ul><h2 id="数据存储方式："><a href="#数据存储方式：" class="headerlink" title="数据存储方式："></a>数据存储方式：</h2><h4 id="1、简单数据类型："><a href="#1、简单数据类型：" class="headerlink" title="1、简单数据类型："></a>1、简单数据类型：</h4><p>​    简单数据类型保存在栈中，这些类型在内存中别占有固定大小，他们的值保存在栈空间，按值访问。变量在声明过程中，会在栈中开辟一段内存空间，变量值直接存在该内存中，变量读写的是它们实际保存的值。</p><img src="/2021/04/29/js%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/01.png" class=""><p>​    简单数据数据复制时，会为新声明的变量直接开辟一段新空间， 然后把值复制到为新变量分配的空间中</p><p>​    简单数据类在当前执行环境结束时销毁。</p><h4 id="2、复杂数据类型："><a href="#2、复杂数据类型：" class="headerlink" title="2、复杂数据类型："></a>2、复杂数据类型：</h4><p>​    复杂数据类型是不固定大小的数据，但是存放他们的地址大小是固定的，所以把地址保存在栈中，值保存在堆中。复杂数据类型是一个指针，指针保存在栈中，但是指针指向的是堆。即存储复杂数据类型的变量保存在栈中，数据本身保存在堆中。读取其数据时，先访问栈中的地址，通过地址找到存在堆中的数据。</p><p><img src="F:\myBlogs\myblog\source_posts\js数据在内存中的存储方式\02.png"></p><p>​    复杂数据类型在进行拷贝的时候，分为深拷贝和浅拷贝：<br>​            浅拷贝：复制的是引用地址，所以拷贝的变量存储的引用地址和原来的指向堆中同一个地址。</p><p>​    深拷贝：栈中开辟一段新的空间存储复制的变量，堆中开辟一个新的空间存储复制的内容，栈中变量存储的引用地址指向堆中复制的一个新的地址。</p>]]></content>
    
    
    <summary type="html">&lt;h6 id=&quot;概要：Js数据类型在内存中的存储形式……&quot;&gt;&lt;a href=&quot;#概要：Js数据类型在内存中的存储形式……&quot; class=&quot;headerlink&quot; title=&quot;概要：Js数据类型在内存中的存储形式……&quot;&gt;&lt;/a&gt;&lt;em&gt;概要：Js数据类型在内存中的存储形式……&lt;/em&gt;&lt;/h6&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>newpagename2</title>
    <link href="http://example.com/2021/04/28/newpagename2/"/>
    <id>http://example.com/2021/04/28/newpagename2/</id>
    <published>2021-04-28T04:49:15.000Z</published>
    <updated>2021-04-28T04:50:19.985Z</updated>
    
    <content type="html"><![CDATA[<p>测试2测试2测试2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试2测试2测试2&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>newpagename</title>
    <link href="http://example.com/2021/04/27/newpagename/"/>
    <id>http://example.com/2021/04/27/newpagename/</id>
    <published>2021-04-27T10:57:24.000Z</published>
    <updated>2021-04-28T04:50:11.867Z</updated>
    
    <content type="html"><![CDATA[<p>测试测试测试测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试测试测试测试&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/27/hello-world/"/>
    <id>http://example.com/2021/04/27/hello-world/</id>
    <published>2021-04-27T09:38:55.496Z</published>
    <updated>2021-04-27T15:22:17.191Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello World&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
